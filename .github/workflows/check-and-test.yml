name: Cargo check and test

on: [pull_request]

permissions:
  contents: read

jobs:
  get-version:
    name: Get version
    runs-on: ubuntu-latest
    outputs:
      toolchain: ${{ steps.get_toolchain.outputs.TOOLCHAIN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git fetch --tags
      - run: pip3 install yq==2.13.0
      - name: Get Build Version
        id: get_version
        run: ./scripts/check-version.sh
        shell: bash
      - name: Get Toolchain Version
        id: get_toolchain
        run: |
          echo "TOOLCHAIN=$(cat rust-toolchain)" >> $GITHUB_OUTPUT

  check-helm-version:
    name: Check helm version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: git fetch --depth=1 --tags origin
      - name: Install yq
        run: sudo snap install yq
      - name: Check Helm Version
        id: get_version
        run: ./scripts/check-helm-version.sh
        shell: bash
      - name: Error if version is not increased
        shell: bash
        run: |
          exit $([[ "${{steps.get_version.outputs.IS_NEW_VERSION}}" = "true" ]] && echo 0 || echo 1)

  helm-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.0.1
      - name: Run chart-testing (lint)
        run: ct lint --validate-maintainers false --charts helm/dscp-node/

  check:
    name: Check and test
    runs-on: ubuntu-latest
    needs: [get-version]

    steps:
      - uses: actions/checkout@v3
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ needs.get-version.outputs.toolchain }}
          target: wasm32-unknown-unknown
      - name: install protobuf compiler
        run: sudo apt-get install protobuf-compiler
      - name: Install sccache
        env:
          TEMP: ${{ runner.temp }}
        run: |
          curl -L https://github.com/gruntwork-io/fetch/releases/download/v0.3.7/fetch_linux_amd64 --output $TEMP/fetch
          chmod +x $TEMP/fetch
          $TEMP/fetch --repo="https://github.com/mozilla/sccache" --tag="~>0.2.15" --release-asset="^sccache-v[0-9.]*-x86_64-unknown-linux-musl.tar.gz$" $TEMP
          tar -xvf $TEMP/sccache-v*-x86_64-unknown-linux-musl.tar.gz -C $TEMP
          mv $TEMP/sccache-v*-x86_64-unknown-linux-musl/sccache $TEMP/sccache
          rm -rf $TEMP/sccache-v*-x86_64-unknown-linux-musl $TEMP/sccache-v*-x86_64-unknown-linux-musl.tar.gz $TEMP/fetch
          chmod +x $TEMP/sccache
      - name: Install rustfmt
        run: rustup component add rustfmt
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-index-
      - name: Cache sccache
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/cache
          key: ${{ runner.os }}-cargo-build-cache-debug-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-cache-debug-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-build-cache-debug-
      - name: Cargo format
        uses: actions-rs/cargo@v1
        env:
          RUSTC_WRAPPER: ${{ runner.temp }}/sccache
          SCCACHE_DIR: ${{ runner.temp }}/cache
        with:
          command: fmt
          args: --check
      - name: Cargo check
        uses: actions-rs/cargo@v1
        env:
          RUSTC_WRAPPER: ${{ runner.temp }}/sccache
          SCCACHE_DIR: ${{ runner.temp }}/cache
        with:
          command: check
      - name: Cargo test
        uses: actions-rs/cargo@v1
        env:
          RUSTC_WRAPPER: ${{ runner.temp }}/sccache
          SCCACHE_DIR: ${{ runner.temp }}/cache
        with:
          command: test

  weight-generation:
    name: weights - ${{ matrix.pallets.pallet-dir }}
    runs-on: ubuntu-latest
    # needs: [check]
    strategy:
      matrix:
        pallets: [ { pallet-dir: process-validation, pallet-name: pallet-process-validation }, { pallet-dir: simple-nft, pallet-name: pallet-simple-nft }, { pallet-dir: symmetric-key, pallet-name: pallet-symmetric-key } ]

    steps:
      - uses: actions/checkout@v3
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ needs.get-version.outputs.toolchain }}
          target: wasm32-unknown-unknown
      - name: install protobuf compiler
        run: sudo apt-get install protobuf-compiler
      - name: Install sccache
        env:
          TEMP: ${{ runner.temp }}
        run: |
          curl -L https://github.com/gruntwork-io/fetch/releases/download/v0.3.7/fetch_linux_amd64 --output $TEMP/fetch
          chmod +x $TEMP/fetch
          $TEMP/fetch --repo="https://github.com/mozilla/sccache" --tag="~>0.2.15" --release-asset="^sccache-v[0-9.]*-x86_64-unknown-linux-musl.tar.gz$" $TEMP
          tar -xvf $TEMP/sccache-v*-x86_64-unknown-linux-musl.tar.gz -C $TEMP
          mv $TEMP/sccache-v*-x86_64-unknown-linux-musl/sccache $TEMP/sccache
          rm -rf $TEMP/sccache-v*-x86_64-unknown-linux-musl $TEMP/sccache-v*-x86_64-unknown-linux-musl.tar.gz $TEMP/fetch
          chmod +x $TEMP/sccache
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-index-
      - name: Cache sccache
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/cache
          key: ${{ runner.os }}-cargo-build-cache-debug-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-cache-debug-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-build-cache-debug-
      - name: Cargo weights build
        uses: actions-rs/cargo@v1
        env:
          RUSTC_WRAPPER: ${{ runner.temp }}/sccache
          SCCACHE_DIR: ${{ runner.temp }}/cache
        with:
          command: run
          args: --release --features=runtime-benchmarks --manifest-path=Cargo.toml -- benchmark pallet --chain=dev --steps=50 --repeat=20 --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --template=./.maintain/frame-weight-template.hbs  --pallet=${{ matrix.pallets.pallet-name }} --output=./pallets/${{ matrix.pallets.pallet-dir }}/src/weights.rs
