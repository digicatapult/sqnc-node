name: Cargo check and test

on: [pull_request]

permissions:
  contents: read

jobs:
  get-version:
    name: Get version
    runs-on: ubuntu-latest
    outputs:
      toolchain: ${{ steps.get_toolchain.outputs.TOOLCHAIN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git fetch --tags
      - run: pip3 install yq==2.13.0
      - name: Get Build Version
        id: get_version
        run: ./scripts/check-version.sh
        shell: bash
      - name: Get Toolchain Version
        id: get_toolchain
        run: |
          echo "TOOLCHAIN=$(cat rust-toolchain)" >> $GITHUB_OUTPUT

  check-helm-version:
    name: Check helm version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: git fetch --depth=1 --tags origin
      - name: Install yq
        run: sudo snap install yq
      - name: Check Helm Version
        id: get_version
        run: ./scripts/check-helm-version.sh
        shell: bash
      - name: Error if version is not increased
        shell: bash
        run: |
          exit $([[ "${{steps.get_version.outputs.IS_NEW_VERSION}}" = "true" ]] && echo 0 || echo 1)

  helm-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.0.1
      - name: Run chart-testing (lint)
        run: ct lint --validate-maintainers false --charts helm/dscp-node/

  check-weights-have-changes:
    name: Check Weights
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: check
        id: check
        run: |
          URL="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files"
          files_changed_data=$(curl -s --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -X GET -G "$URL")
          files_changed="$(echo $files_changed_data | jq -r '.[] | .filename')"
          # Adding || true to avoid "Process exited with code 1" errors
          pallet_dirs_changed="$(echo "${files_changed}" | xargs dirname | grep -v "pallets/traits/*" | grep -v "pallets/doas/*" | grep -v "pallets/transaction-payment-free/*" | grep -o "pallets/[^/]*" | sort | uniq || true)"
          pallets_requiring_weights=()
          for pallet_dir in ${pallet_dirs_changed}; do
            weights="$(echo "${files_changed}" | grep -o "${pallet_dir}/src/weights.rs" || true)"
            if [[ -z "$weights" ]]; then pallets_requiring_weights+=($(basename $pallet_dir)); fi
          done

          echo "pallets=${pallets_requiring_weights[*]}" >> $GITHUB_OUTPUT     
      - name: Find Comment
        id: find
        uses: peter-evans/find-comment@v2
        if: steps.check.outputs.pallets != ''
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: This PR updates the following pallets
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v2
        if: ${{ steps.find.outputs.comment-id == '' && steps.find.outcome == 'success' }}
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            This PR updates the following pallets - they may also require updates to their extrinsic weights:
              **${{ steps.check.outputs.pallets }}**

            For the author and any reviewers:
              - consider whether the changes could significantly affect the weight of any extrinsics
              - consider whether benchmarks need updating to correctly cover weight variations over inputs
            
            For a guide on running benchmarks to update weights see [calculating weights](https://github.com/digicatapult/dscp-node#calculating-weights)

  check:
    name: Check and test - ${{ matrix.architectures.arch }}
    runs-on: ubuntu-latest
    needs: [get-version]
    strategy:
      matrix:
        architectures: [ {arch: x86_64, target-tupl: x86_64-unknown-linux-gnu}, {arch: aarch64, target-tupl: aarch64-unknown-linux-gnu, gcc_package: gcc-aarch64-linux-gnu, gcc: aarch64-linux-gnu-gcc, gpp_package: g++-aarch64-linux-gnu, gpp: aarch64-linux-gnu-g++}]

    steps:
      - uses: actions/checkout@v3
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ needs.get-version.outputs.toolchain }}
          target: wasm32-unknown-unknown
      - name: Install arch ${{ matrix.architectures.arch }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ needs.get-version.outputs.toolchain }}
          target: ${{ matrix.architectures.target-tupl }}
          override: true
      - name: install protobuf compiler
        run: sudo apt-get install protobuf-compiler
      - name: install cross-compilation tools
        run: |
          sudo dpkg --add-architecture aarch64
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y ${{ matrix.architectures.gcc_package }} ${{ matrix.architectures.gpp_package }} pkg-config libclang-dev libz-dev libssl-dev
          upcase=$(echo ${{ matrix.architectures.target-tupl }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
          echo CARGO_TARGET_${upcase}_LINKER=${{ matrix.architectures.gcc }} >> $GITHUB_ENV
          echo CC_${{ matrix.architectures.target-tupl }}=${{ matrix.architectures.gcc }} >> $GITHUB_ENV
          echo CXX_${{ matrix.architectures.target-tupl }}=${{ matrix.architectures.gpp }} >> $GITHUB_ENV
          echo BINDGEN_EXTRA_CLANG_ARGS="--sysroot=/usr/aarch64-linux-gnu -mfloat-abi=hard" >> $GITHUB_ENV
          echo PKG_CONFIG_ALLOW_CROSS=1 >> $GITHUB_ENV
          echo PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig/ >> $GITHUB_ENV
          echo ZLIB_NO_PKG_CONFIG=1 >> $GITHUB_ENV
        if: matrix.architectures.gcc_package != ''
      # - name: Install sccache
      #   env:
      #     TEMP: ${{ runner.temp }}
      #   run: |
      #     curl -L https://github.com/gruntwork-io/fetch/releases/download/v0.3.7/fetch_linux_amd64 --output $TEMP/fetch
      #     chmod +x $TEMP/fetch
      #     $TEMP/fetch --repo="https://github.com/mozilla/sccache" --tag="~>0.2.15" --release-asset="^sccache-v[0-9.]*-x86_64-unknown-linux-musl.tar.gz$" $TEMP
      #     tar -xvf $TEMP/sccache-v*-x86_64-unknown-linux-musl.tar.gz -C $TEMP
      #     mv $TEMP/sccache-v*-x86_64-unknown-linux-musl/sccache $TEMP/sccache
      #     rm -rf $TEMP/sccache-v*-x86_64-unknown-linux-musl $TEMP/sccache-v*-x86_64-unknown-linux-musl.tar.gz $TEMP/fetch
      #     chmod +x $TEMP/sccache
      - name: Install rustfmt
        run: rustup component add rustfmt
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-index-
      # - name: Cache sccache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ runner.temp }}/cache
      #     key: ${{ runner.os }}-cargo-build-cache-debug-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-cargo-build-cache-debug-${{ hashFiles('**/Cargo.lock') }}
      #       ${{ runner.os }}-cargo-build-cache-debug-
      - name: Cargo format
        uses: actions-rs/cargo@v1
        # env:
        #   RUSTC_WRAPPER: ${{ runner.temp }}/sccache
        #   SCCACHE_DIR: ${{ runner.temp }}/cache
        with:
          command: fmt
          args: --check
      - name: Cargo check
        uses: actions-rs/cargo@v1
        # env:
        #   RUSTC_WRAPPER: ${{ runner.temp }}/sccache
        #   SCCACHE_DIR: ${{ runner.temp }}/cache
        with:
          command: check
          args: --target ${{ matrix.architectures.target-tupl }}
      - name: Cargo test
        uses: actions-rs/cargo@v1
        # env:
        #   RUSTC_WRAPPER: ${{ runner.temp }}/sccache
        #   SCCACHE_DIR: ${{ runner.temp }}/cache
        with:
          command: test
          args: --target ${{ matrix.architectures.target-tupl }} --verbose
