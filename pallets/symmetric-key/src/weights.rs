
//! Autogenerated weights for pallet_symmetric_key
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-28, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/dscp-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-symmetric-key
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/symmetric-key/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_symmetric_key.
pub trait WeightInfo {
	fn update_key() -> Weight;
	fn rotate_key() -> Weight;
}

/// Weights for pallet_symmetric_key using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: IpfsKey Key (r:0 w:1)
	fn update_key() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(15_000_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: IpfsKey Key (r:0 w:1)
	fn rotate_key() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(18_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: IpfsKey Key (r:0 w:1)
	fn update_key() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(15_000_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: IpfsKey Key (r:0 w:1)
	fn rotate_key() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(18_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}
