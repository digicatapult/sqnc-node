
//! Autogenerated weights for pallet_process_validation
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-03, STEPS: `500`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/dscp-node
// benchmark
// pallet
// --chain=dev
// --steps=500
// --repeat=20
// --pallet=pallet-process-validation
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/process-validation/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_process_validation.
pub trait WeightInfo {
	fn create_process(r: u32, ) -> Weight;
	fn disable_process() -> Weight;
}

/// Weights for pallet_process_validation using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ProcessValidation VersionModel (r:1 w:1)
	// Storage: ProcessValidation ProcessModel (r:1 w:1)
	/// The range of component `r` is `[1, 101]`.
	fn create_process(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(22_000_000 as u64)
			// Standard Error: 139
			.saturating_add(Weight::from_ref_time(213_495 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ProcessValidation ProcessModel (r:1 w:1)
	// Storage: ProcessValidation VersionModel (r:1 w:0)
	fn disable_process() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(27_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ProcessValidation VersionModel (r:1 w:1)
	// Storage: ProcessValidation ProcessModel (r:1 w:1)
	/// The range of component `r` is `[1, 101]`.
	fn create_process(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(22_000_000 as u64)
			// Standard Error: 139
			.saturating_add(Weight::from_ref_time(213_495 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ProcessValidation ProcessModel (r:1 w:1)
	// Storage: ProcessValidation VersionModel (r:1 w:0)
	fn disable_process() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(27_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}
