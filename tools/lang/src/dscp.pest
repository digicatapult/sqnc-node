string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

ident = @{ !(keyword) ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
ident_prop = { ident ~ "." ~ ident }

keyword = _{ pub | priv | fn | struct | where | sender | bool_op | cmp_op }
    pub = _{ "pub" }
    priv = _{ "priv" }
    fn = _{ "fn" }
    struct = _{ "struct" }
    where = _{ "where" }

file = { "File" }
literal = { "Literal" }
role = { "Role" }
none = { "None" }
sender = { "sender" }
literal_value = { string }

partial_type = _{ file | literal | role | none | literal_value | ident }
cmp_type = _{ file | literal | role | none }

type = { partial_type ~ ("|" ~ partial_type)* }

field = { ident ~ ":" ~ type }
properties = { (field ~ ",")* ~ (field)? }

struct_decl = { "struct" ~ ident ~ "{" ~ properties ~ "}" }

prop_lit_cmp = { ident_prop ~ cmp_op ~ literal_value }
prop_sender_cmp = { ident_prop ~ cmp_op ~ sender }
ident_ident_cmp = { ident ~ cmp_op ~ ident }
prop_ident_cmp = { ident_prop ~ cmp_op ~ ident }
prop_prop_cmp = { ident_prop ~ cmp_op ~ ident_prop }
prop_type_cmp = { ident_prop ~ cmp_type_op ~ cmp_type }

fn_args = { "|" ~ (ident ~ ",")* ~ ident? ~ "|" }
fn_cmp = { ident ~ fn_args ~ "=>" ~ fn_args }

cmp = _{ fn_cmp | prop_prop_cmp | prop_lit_cmp | prop_sender_cmp | prop_ident_cmp | ident_ident_cmp | prop_type_cmp }

cmp_op = _{ eq | neq }
    eq = { "==" }
    neq = { "!=" }
cmp_type_op = _{ is | isnt }
    is = { ":" }
    isnt = { "!:" }

bool_op = _{ bool_op_and | bool_op_or | bool_op_xor }
    bool_op_and = { "&" | ^"and" }
    bool_op_or = { "|" | ^"or" }
    bool_op_xor = { "^" | ^"xor" }

unary_not = { "!" }

atom = _{ cmp | unary_not? ~ "(" ~ expr ~ ")" }
expr = { atom ~ (bool_op ~ atom)* }

expr_list = { "{" ~ (expr ~ ",")* ~ expr? ~ "}" }

vis = { (pub | priv)? }
fn_decl_arg = { ident ~ ":" ~ ident }
fn_decl_arg_list = { "|" ~ (fn_decl_arg ~ ",")* ~ (fn_decl_arg)? ~ "|" }
fn_decl = { vis ~ fn ~ ident ~ fn_decl_arg_list ~ "=>" ~ fn_decl_arg_list ~ where ~ expr_list }

decl = _{ struct_decl | fn_decl }
program = _{ decl+ }

main = _{ SOI ~ program ~ EOI }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!"\n" ~ ANY)* ~ "\n" }
